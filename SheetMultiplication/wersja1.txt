using System;
using System.Collections.Generic;
using System.Linq;
using Autodesk.Revit.UI;
using Autodesk.Revit.DB;
using Autodesk.Revit.Attributes;
using System.Windows.Forms;
using System.Drawing;

namespace SheetMultiplication
{
    [Transaction(TransactionMode.Manual)]
    public class DuplicateSheetsCommand : IExternalCommand
    {
        public Result Execute(ExternalCommandData commandData, ref string message, ElementSet elements)
        {
            UIApplication uiApp = commandData.Application;
            UIDocument uidoc = uiApp.ActiveUIDocument;
            Document doc = uidoc.Document;

            // Pobierz wszystkie arkusze z projektu
            var allSheets = new FilteredElementCollector(doc)
                .OfClass(typeof(ViewSheet))
                .Cast<ViewSheet>()
                .Where(sheet => !sheet.IsTemplate)
                .ToList();

            if (allSheets.Count == 0)
            {
                TaskDialog.Show("Błąd", "Brak arkuszy w projekcie.");
                return Result.Failed;
            }

            // Pokaż formularz do wyboru arkusza
            ViewSheet selectedSheet = ShowSheetSelectionDialog(allSheets);
            if (selectedSheet == null)
            {
                TaskDialog.Show("Bład", "Null");
                return Result.Cancelled;
            }

            // Przykładowe dane
            List<string> newSheetNumbers = new List<string> { "A201", "A202", "A203" };
            List<string> newSheetNames = new List<string> { "Rzut piwnicy", "Rzut poddasza", "Rzut dachu" };

            // Pobierz TitleBlock z wybranego arkusza
            FilteredElementCollector collector = new FilteredElementCollector(doc, selectedSheet.Id);
            var titleBlock = collector
                .OfCategory(BuiltInCategory.OST_TitleBlocks)
                .WhereElementIsNotElementType()
                .FirstOrDefault();

            if (titleBlock == null)
            {
                TaskDialog.Show("Błąd", "Na arkuszu nie znaleziono bloku tytułowego.");
                return Result.Failed;
            }

            ElementId titleBlockTypeId = titleBlock.GetTypeId();

            using (Transaction t = new Transaction(doc, "Powielanie arkuszy"))
            {
                t.Start();

                for (int i = 0; i < newSheetNumbers.Count; i++)
                {
                    ViewSheet newSheet = ViewSheet.Create(doc, titleBlockTypeId);
                    newSheet.SheetNumber = newSheetNumbers[i];
                    newSheet.Name = newSheetNames[i];
                }

                t.Commit();
            }

            TaskDialog.Show("Sukces", $"Utworzono {newSheetNumbers.Count} nowych arkuszy.");
            return Result.Succeeded;
        }

        private ViewSheet ShowSheetSelectionDialog(List<ViewSheet> sheets)
        {
            ViewSheet selectedSheet = null;

            System.Windows.Forms.Form form = new System.Windows.Forms.Form
            {
                Text = "Wybierz arkusz do powielenia",
                Width = 400,
                Height = 500,
                StartPosition = FormStartPosition.CenterScreen
            };

            ListBox listBox = new ListBox
            {
                Dock = DockStyle.Top,
                Height = 400
            };

            var sheetLookup = new Dictionary<string, ViewSheet>();
            foreach (var sheet in sheets)
            {
                string display = $"{sheet.SheetNumber} - {sheet.Name}";
                sheetLookup[display] = sheet;
                listBox.Items.Add(display);
            }

            Button okButton = new Button
            {
                Text = "OK",
                DialogResult = DialogResult.OK,
                Dock = DockStyle.Bottom
            };

            form.Controls.Add(listBox);
            form.Controls.Add(okButton);
            form.AcceptButton = okButton;

            if (form.ShowDialog() == DialogResult.OK && listBox.SelectedItem != null)
            {
                string selected = listBox.SelectedItem.ToString();
                selectedSheet = sheetLookup[selected];
            }

            return selectedSheet;
        }
    }
}
